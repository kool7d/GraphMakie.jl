var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GraphMakie","category":"page"},{"location":"#GraphMakie","page":"Home","title":"GraphMakie","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"EditURL = \"https://github.com/kool7d/GraphMakie.jl/blob/master/docs/pages/plots.jl\"","category":"page"},{"location":"generated/plots/#Plotting-Graphs-with-GraphMakie.jl","page":"Feature Walkthrough","title":"Plotting Graphs with GraphMakie.jl","text":"","category":"section"},{"location":"generated/plots/#The-graphplot-Command","page":"Feature Walkthrough","title":"The graphplot Command","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"Plotting your first AbstractGraph from Graphs.jl is as simple as","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"using CairoMakie\nset_theme!(resolution=(800, 400)) #hide\nCairoMakie.inline!(true) # hide\nusing GraphMakie\nusing Graphs\nimport Random; Random.seed!(2) # hide\n\nusing GraphMakie.NetworkLayout\n\ng = wheel_digraph(10)\narrow_size = [10+i for i in 1:ne(g)]\narrow_shift = range(0.1, 0.8, length=ne(g))\nf, ax, p = graphplot(g; arrow_size, arrow_shift)\nhidedecorations!(ax); hidespines!(ax); ax.aspect = DataAspect()\nf # hide\n\nset_theme!(resolution=(800, 800)) #hide\ng = SimpleGraph(8); add_edge!(g, 1, 2); add_edge!(g, 3, 4); add_edge!(g, 5, 6); add_edge!(g, 7, 8)\n\nwaypoints = Dict(1 => [(.25,  0.25), (.75, -0.25)],\n                 2 => [(.25, -0.25), (.75, -0.75)],\n                 3 => [(.25, -0.75), (.75, -1.25)],\n                 4 => [(.25, -1.25), (.75, -1.75)])\nwaypoint_radius = Dict(1 => nothing,\n                       2 => 0,\n                       3 => 0.05,\n                       4 => 0.15)\n\nf = Figure(); f[1,1] = ax = Axis(f)\nusing Makie.Colors # hide\nfor i in 3:4 #hide\n    poly!(ax, Circle(Point2f(waypoints[i][1]), waypoint_radius[i]), color=RGBA(0.0,0.44705883,0.69803923,0.2)) #hide\n    poly!(ax, Circle(Point2f(waypoints[i][2]), waypoint_radius[i]), color=RGBA(0.0,0.44705883,0.69803923,0.2)) #hide\nend #hide\n\np = graphplot!(ax, g; layout=SquareGrid(cols=2, dy=-0.5),\n               waypoints, waypoint_radius,\n               nlabels=[\"\",\"r = nothing (equals :spline)\",\n                        \"\",\"r = 0 (straight lines)\",\n                        \"\",\"r = 0.05 (in data space)\",\n                        \"\",\"r = 0.1\"],\n               nlabels_distance=30, nlabels_align=(:left,:center))\n\nfor i in 1:4 #hide\n    scatter!(ax, waypoints[i], color=RGBA(0.0,0.44705883,0.69803923,1.0)) #hide\nend #hide\nxlims!(ax, (-0.1, 2.25)), hidedecorations!(ax); hidespines!(ax); ax.aspect = DataAspect()\nf # hide","category":"page"},{"location":"generated/plots/#Plot-Graphs-in-3D","page":"Feature Walkthrough","title":"Plot Graphs in 3D","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"If the layout returns points in 3 dimensions, the plot will be in 3D. However this is a bit experimental. Feel free to file an issue if there are any problems.","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"set_theme!(resolution=(800, 800)) #hide\ng = smallgraph(:cubical)\nelabels_shift = [0.5 for i in 1:ne(g)]\nelabels_shift[[2,7,8,9]] .= 0.3\nelabels_shift[10] = 0.25\ngraphplot(g; layout=Spring(dim=3, seed=5),\n          elabels=\"Edge \".*repr.(1:ne(g)),\n          elabels_textsize=12,\n          elabels_opposite=[3,5,7,8,12],\n          elabels_shift,\n          elabels_distance=3,\n          arrow_show=true,\n          arrow_shift=0.9,\n          arrow_size=15)\n\nusing JSServe\nPage(exportable=true, offline=true)","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"using WGLMakie\nWGLMakie.activate!()\nset_theme!(resolution=(800, 600))\ng = smallgraph(:dodecahedral)\ngp = graphplot(g, layout=Spring(dim=3), node_size=100)\ngp","category":"page"},{"location":"generated/plots/#Record-a-statemap","page":"Feature Walkthrough","title":"Record a statemap","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"N = 60\nfunction xy_data(x, y)\n    r = sqrt(x^2 + y^2)\n    r == 0.0 ? 1f0 : (sin(r)/r)\nend\nl = range(-10, stop = 10, length = N)\nz = Float32[xy_data(x, y) for x in l, y in l]\nsurface(\n    -1..1, -1..1, z,\n    colormap = :Spectral\n)","category":"page"},{"location":"generated/plots/#Record-a-statemap-2","page":"Feature Walkthrough","title":"Record a statemap","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"must be true to be found inside the DOM","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"is_widget(x) = true","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"Updating the widget isn't dependant on any other state (only thing supported right now)","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"is_independant(x) = true","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"The values a widget can iterate","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"function value_range end","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"updating the widget with a certain value (usually an observable)","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"function update_value!(x, value) end\n\nusing Observables\nusing JSServe: Slider\n\nApp() do session::Session\n    n = 10\n    index_slider = Slider(1:n)\n    volume = rand(n, n, n)\n    slice = map(index_slider) do idx\n        return volume[:, :, idx]\n    end\n    fig = Figure()\n    ax, cplot = contour(fig[1, 1], volume)\n    rectplot = linesegments!(ax, Rect(-1, -1, 12, 12), linewidth=2, color=:red)\n    on(index_slider) do idx\n        translate!(rectplot, 0,0,idx)\n    end\n    heatmap(fig[1, 2], slice)\n    slider = DOM.div(\"z-index: \", index_slider, index_slider.value)\n    return JSServe.record_states(session, DOM.div(slider, fig))\nend","category":"page"},{"location":"generated/plots/#Record-a-statemap-3","page":"Feature Walkthrough","title":"Record a statemap","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"using JSServe\nusing JSServe: @js_str, App\nusing JSServe.DOM\nusing JSServe, Observables\nusing JSServe: @js_str, Session, App, onjs, onload, Button\nusing JSServe: TextField, Slider, linkjs, get_server\nusing JSServe.DOM\nusing JSServe: JSON3","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"Javascript & CSS dependencies can be declared locally and freely interpolated in the DOM / js string, and will make sure it loads","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"const THREE = JSServe.Dependency(:THREE,[\"https://cdn.jsdelivr.net/gh/mrdoob/three.js/build/three.min.js\"])\n\nApp() do session::Session\n    width = 500; height = 500\n    dom = DOM.div(width = width, height = height)\n    JSServe.onload(session, dom, js\"\"\"\n        function (container){\n\n            var renderer = new $(THREE).WebGLRenderer({antialias: true});\n            renderer.setSize($width, $height);\n            renderer.setClearColor(\"#ffffff\");\n            container.appendChild(renderer.domElement);\n            renderer.setPixelRatio( window.devicePixelRatio );\n\n            //\n            // requestAnimationFrame( animate );\n\n            var scene = new $THREE.Scene();\n            var camera = new $THREE.PerspectiveCamera(75, $width / $height, 0.1, 1000);\n            camera.position.z = 4;\n            var ambientLight = new $THREE.AmbientLight(0xcccccc, 0.4);\n            scene.add(ambientLight);\n            var pointLight = new $THREE.PointLight(0xffffff, 0.8);\n            camera.add(pointLight);\n            scene.add(camera);\n            // var geometry = new $THREE.TorusKnotGeometry( 50, 10, 50, 20 );\n            var material = new $THREE.MeshPhongMaterial({color: 0xffff00});\n\n            object = new $THREE.Mesh( new $THREE.CylinderGeometry( 25, 75, 100, 40, 5 ), material );\n            object.position.set( - 300, 0, - 200 );\n            scene.add( object );\n\n            object = new $THREE.Mesh( new $THREE.TorusGeometry( 50, 20, 20, 20 ), material );\n            object.position.set( 100, 0, - 200 );\n            scene.add( object );\n\n            object = new $THREE.Mesh( new $THREE.TorusKnotGeometry( 50, 10, 50, 20 ), material );\n            object.position.set( 300, 0, - 200 );\n            scene.add( object );\n\n            object = new $THREE.Mesh( new $THREE.PlaneGeometry( 100, 100, 4, 4 ), material );\n            object.position.set( - 300, 0, 0 );\n            scene.add( object );\n\n            object = new $THREE.Mesh( new $THREE.BoxGeometry( 100, 100, 100, 4, 4, 4 ), material );\n            object.position.set( - 100, 0, 0 );\n            scene.add( object );\n\n            object = new $THREE.Mesh( new $THREE.CircleGeometry( 50, 20, 0, Math.PI * 2 ), material );\n            object.position.set( 100, 0, 0 );\n            scene.add( object );\n\n            object = new $THREE.Mesh( new $THREE.RingGeometry( 10, 50, 20, 5, 0, Math.PI * 2 ), material );\n            object.position.set( 300, 0, 0 );\n            scene.add( object );\n\n            object = new $THREE.Mesh( new $THREE.CylinderGeometry( 25, 75, 100, 40, 5 ), material );\n            object.position.set( - 300, 0, - 200 );\n            scene.add( object );\n\n            camera.position.z = 200\n            camera.position.x = 100\n            camera.position.y = 200\n            camera.lookAt( 0, 0, 0 );\n            function render() {\n\n\t\t\t\tconst timer = Date.now() * 0.0001;\n\n\t\t\t\tcamera.position.x = Math.cos( timer ) * 800;\n\t\t\t\tcamera.position.z = Math.sin( timer ) * 800;\n\n\t\t\t\tcamera.lookAt( scene.position );\n\n\t\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\t\tif ( object.isMesh === true ) {\n\n\t\t\t\t\t\tobject.rotation.x = timer * 5;\n\t\t\t\t\t\tobject.rotation.y = timer * 2.5;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\trenderer.render( scene, camera );\n\n\t\t\t};\n            function animate() {\n\n                requestAnimationFrame( animate );\n                render();\n            };\n            animate();\n        }\n    \"\"\")\n    return dom\nend","category":"page"},{"location":"generated/plots/#Record-a-statemap-4","page":"Feature Walkthrough","title":"Record a statemap","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"const GUI = JSServe.Dependency(:GUI,[\"https://github.com/mrdoob/three.js/blob/master/examples/jsm/libs/lil-gui.module.min.js\"]) const OrbitControls = JSServe.Dependency(:OrbitControls,[\"https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js\"]) const TransformControls = JSServe.Dependency(:TransformControls,[\"https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/TransformControls.js\"])","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"This page was generated using Literate.jl.","category":"page"}]
}
