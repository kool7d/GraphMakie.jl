var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GraphMakie","category":"page"},{"location":"#GraphMakie","page":"Home","title":"GraphMakie","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the Documentation for GraphMakie.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This Package consists of two parts: a plot recipe for graphs types from Graphs.jl and some helper functions to add interactions to those plots.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: about Graphs.jl and LightGraphs.jl\nStarting from v0.3 GraphMakie.jl switches from LightGraphs.jl to Graphs.jl as the for the underlying graph package. See this discourse post for more information. If you want to use LightGraphs.jl please specifically ] add GraphMakie@0.2!","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are also plot examples and interaction examples pages.","category":"page"},{"location":"#The-graphplot-Recipe","page":"Home","title":"The graphplot Recipe","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"graphplot","category":"page"},{"location":"#GraphMakie.graphplot","page":"Home","title":"GraphMakie.graphplot","text":"graphplot(graph::AbstractGraph)\ngraphplot!(ax, graph::AbstractGraph)\n\nCreates a plot of the network graph. Consists of multiple steps:\n\nLayout the nodes: see layout attribute. The node position is accessible from outside the plot object p as an observable using p[:node_pos].\nplot edges as edgeplot-plot\nif arrows_show plot arrowheads as scatter-plot\nplot nodes as scatter-plot\nif nlabels!=nothing plot node labels as text-plot\nif elabels!=nothing plot edge labels as text-plot\n\nThe main attributes for the subplots are exposed as attributes for graphplot. Additional attributes for the scatter, edgeplot and text plots can be provided as a named tuples to node_attr, edge_attr, nlabels_attr and elabels_attr.\n\nMost of the arguments can be either given as a vector of length of the edges/nodes or as a single value. One might run into errors when changing the underlying graph and therefore changing the number of Edges/Nodes.\n\nAttributes\n\nMain attributes\n\nlayout=Spring(): function AbstractGraph->Vector{Point} determines the base layout\nnode_color=scatter_theme.color\nnode_size=scatter_theme.markersize\nnode_marker=scatter_theme.marker\nnode_attr=(;): List of kw arguments which gets passed to the scatter command\nedge_color=lineseg_theme.color: Color for edges.\nedge_width=lineseg_theme.linewidth: Pass a vector with 2 width per edge to get pointy edges.\nedge_attr=(;): List of kw arguments which gets passed to the linesegments command\narrow_show=Makie.automatic: Bool, indicate edge directions with arrowheads? Defaults to true for SimpleDiGraph and false otherwise.\narrow_size=scatter_theme.markersize: Size of arrowheads.\narrow_shift=0.5: Shift arrow position from source (0) to dest (1) node.\narrow_attr=(;): List of kw arguments which gets passed to the scatter command\n\nNode labels\n\nThe position of each label is determined by the node position plus an offset in data space.\n\nnlabels=nothing: Vector{String} with label for each node\nnlabels_align=(:left, :bottom): Anchor of text field.\nnlabels_distance=0.0: Pixel distance from node in direction of align.\nnlabels_color=labels_theme.color\nnlabels_offset=nothing: Point or Vector{Point} (in data space)\nnlabels_textsize=labels_theme.textsize\nnlabels_attr=(;): List of kw arguments which gets passed to the text command\n\nEdge labels\n\nThe base position of each label is determinded by src + shift*(dst-src). The additional distance parameter is given in pixels and shifts the text away from the edge.\n\nelabels=nothing: Vector{String} with label for each edge\nelabels_align=(:center, :bottom): Anchor of text field.\nelabels_distance=0.0: Pixel distance of anchor to edge.\nelabels_shift=0.5: Position between src and dst of edge.\nelabels_opposite=Int[]: List of edge indices, for which the label should be displayed on the opposite side\nelabels_rotation=nothing: Angle of text per label. If nothing this will be determined by the edge angle!\nelabels_offset=nothing: Additional offset in data space\nelabels_color=labels_theme.color\nelabels_textsize=labels_theme.textsize\nelabels_attr=(;): List of kw arguments which gets passed to the text command\n\nself edges & curvy edges\n\nedge_plottype=Makie.automatic(): Either automatic, :linesegments or :beziersegments. :beziersegments are much slower for big graphs!\nselfedge_size=Makie.automatic(): Size of self-edge-loop (dict/vector possible).\nselfedge_direction=Makie.automatic(): Direction of self-edge-loop as Point2 (dict/vector possible).\nselfedge_width=Makie.automatic(): Opening of selfloop in rad (dict/vector possible).\ntangents=nothing:\nSpecify a pair of tangent vectors per edge (for src and dst). If nothing   (or edge idx not in dict) draw a straight line.\ntfactor=0.6:\nFactor is used to calculate the bezier waypoints from the (normalized) tangents.   Higher factor means bigger radius. Can be tuple per edge to specify different   factor for src and dst.\nwaypoints=nothing\nSpecify waypoints for edges. This parameter should be given as a vector or   dict. Waypoints will be crossed using natural cubic splines. The waypoints may   or may not include the src/dst positions.\nwaypoint_radius=nothing: If number (dict/vector possible) bent lines within radius of waypoints.\n\n\n\n\n\n","category":"function"},{"location":"#Network-Layouts","page":"Home","title":"Network Layouts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The layout algorithms are provided by NetworkLayout.jl. See the docs for a list of available layouts.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A layout has to be a function f(g::AbstractGraph) -> pos::Vector{Point}. You can also provide your own layouts or use other packages like LayeredLayouts.jl for DAG (see also the Dependency Graph of a Package example).","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LayeredLayouts\nfunction mylayout(g::SimpleGraph)\n   xs, ys, _ = solve_positions(Zarate(), g)\n   return Point.(zip(xs, ys))\nend","category":"page"},{"location":"#Predefined-Interactions","page":"Home","title":"Predefined Interactions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GraphMakie.jl provides some pre-built interactions to enable drag&drop of nodes and edges as well as highlight on hover.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To try them all use the following code in a GLMakie environment.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GLMakie\nusing GraphMakie\nusing Graphs\ng = wheel_graph(10)\nf, ax, p = graphplot(g, edge_width=[3 for i in 1:ne(g)],\n                     node_size=[10 for i in 1:nv(g)])\n\nderegister_interaction!(ax, :rectanglezoom)\nregister_interaction!(ax, :nhover, NodeHoverHighlight(p))\nregister_interaction!(ax, :ehover, EdgeHoverHighlight(p))\nregister_interaction!(ax, :ndrag, NodeDrag(p))\nregister_interaction!(ax, :edrag, EdgeDrag(p))","category":"page"},{"location":"","page":"Home","title":"Home","text":"NodeHoverHighlight\nEdgeHoverHighlight\nNodeDrag\nEdgeDrag","category":"page"},{"location":"#GraphMakie.NodeHoverHighlight","page":"Home","title":"GraphMakie.NodeHoverHighlight","text":"NodeHoverHeighlight(p::GraphPlot, factor=2)\n\nMagnifies the node_size of node under cursor by factor.\n\nExample\n\njulia> g = wheel_graph(10)\njulia> f, ax, p = graphplot(g, node_size = [20 for i in 1:nv(g)])\njulia> register_interaction!(ax, :nodehover, NodeHoverHighlight(p))\n\n\n\n\n\n","category":"function"},{"location":"#GraphMakie.EdgeHoverHighlight","page":"Home","title":"GraphMakie.EdgeHoverHighlight","text":"EdgeHoverHeighlight(p::GraphPlot, factor=2)\n\nMagnifies the edge_width of edge under cursor by factor. If arrow_size isa Vector{<:Real} it also magnefies the arrow scatter.\n\nExample\n\njulia> g = wheel_digraph(10)\njulia> f, ax, p = graphplot(g, edge_width = [3 for i in 1:ne(g)],\n                               arrow_size=[10 for i in 1:ne(g)])\njulia> register_interaction!(ax, :nodehover, EdgeHoverHighlight(p))\n\n\n\n\n\n","category":"function"},{"location":"#GraphMakie.NodeDrag","page":"Home","title":"GraphMakie.NodeDrag","text":"NodeDrag(p::GraphPlot)\n\nAllows drag and drop of Nodes. Please deregister the :rectanglezoom interaction.\n\nExample\n\njulia> g = wheel_graph(10)\njulia> f, ax, p = graphplot(g, node_size = [10 for i in 1:nv(g)])\njulia> deregister_interaction!(ax, :rectanglezoom)\njulia> register_interaction!(ax, :nodehover, NodeHoverHighlight(p))\njulia> register_interaction!(ax, :nodedrag, NodeDrag(p))\n\n\n\n\n\n","category":"function"},{"location":"#GraphMakie.EdgeDrag","page":"Home","title":"GraphMakie.EdgeDrag","text":"EdgeDrag(p::GraphPlot)\n\nAllows drag and drop of Edges. Please deregister the :rectanglezoom interaction.\n\nExample\n\njulia> g = wheel_graph(10)\njulia> f, ax, p = graphplot(g, edge_width = [3 for i in 1:ne(g)])\njulia> deregister_interaction!(ax, :rectanglezoom)\njulia> register_interaction!(ax, :edgehover, EdgeHoverHighlight(p))\njulia> register_interaction!(ax, :edgedrag, EdgeDrag(p))\n\n\n\n\n\n","category":"function"},{"location":"#Interaction-Interface","page":"Home","title":"Interaction Interface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GraphMakie.jl provides some helper functions to register interactions to your graph plot. There are special interaction types for hovering, clicking and draging nodes and edges. For more information on the axis interaction please consult the Makie.jl docs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The general idea is to create some handler type, provide some action function and register it as an interaction with the axes.","category":"page"},{"location":"#Click-Interactions","page":"Home","title":"Click Interactions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NodeClickHandler\nEdgeClickHandler","category":"page"},{"location":"#GraphMakie.NodeClickHandler","page":"Home","title":"GraphMakie.NodeClickHandler","text":"NodeClickHandler(fun)\n\nInitializes ClickHandler for nodes. Calls function\n\nfun(idx, event, axis)\n\non left-click events where idx is the node index.\n\nExample\n\njulia> using Makie.Colors\njulia> g = wheel_digraph(10)\njulia> f, ax, p = graphplot(g, node_size=30, node_color=[colorant\"red\" for i in 1:nv(g)])\njulia> function action(idx, event, axis)\n           p.node_color[][idx] = rand(RGB)\n           p.node_color[] = p.node_color[]\n       end\njulia> register_interaction!(ax, :nodeclick, NodeClickHandler(action))\n\n\n\n\n\n","category":"function"},{"location":"#GraphMakie.EdgeClickHandler","page":"Home","title":"GraphMakie.EdgeClickHandler","text":"EdgeClickHandler(fun)\n\nInitializes ClickHandler for edges. Calls function\n\nfun(idx, event, axis)\n\non left-click events where idx is the edge index.\n\nExample\n\njulia> using Makie.Colors\njulia> g = wheel_digraph(10)\njulia> f, ax, p = graphplot(g, edge_width=4, edge_color=[colorant\"black\" for i in 1:ne(g)])\njulia> function action(idx, event, axis)\n           p.edge_color[][idx] = rand(RGB)\n           p.edge_color[] = p.edge_color[]\n       end\njulia> register_interaction!(ax, :edgeclick, EdgeClickHandler(action))\n\n\n\n\n\n","category":"function"},{"location":"#Hover-Interactions","page":"Home","title":"Hover Interactions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NodeHoverHandler\nEdgeHoverHandler","category":"page"},{"location":"#GraphMakie.NodeHoverHandler","page":"Home","title":"GraphMakie.NodeHoverHandler","text":"NodeHoverHandler(fun)\n\nInitializes HoverHandler for nodes. Calls function\n\nfun(hoverstate, idx, event, axis)\n\nwith hoverstate=true on hover and false at the end of hover. idx is the node index.\n\nExample\n\njulia> g = wheel_digraph(10)\njulia> f, ax, p = graphplot(g, node_size = [20 for i in 1:nv(g)])\njulia> function action(state, idx, event, axis)\n           p.node_size[][idx] = state ? 40 : 20\n           p.node_size[] = p.node_size[] #trigger observable\n       end\njulia> register_interaction!(ax, :nodehover, NodeHoverHandler(action))\n\n\n\n\n\n","category":"function"},{"location":"#GraphMakie.EdgeHoverHandler","page":"Home","title":"GraphMakie.EdgeHoverHandler","text":"EdgeHoverHandler(fun)\n\nInitializes HoverHandler for edges. Calls function\n\nfun(hoverstate, idx, event, axis)\n\nwith hoverstate=true on hover and false at the end of hover. idx is the edge index.\n\nExample\n\njulia> g = wheel_digraph(10)\njulia> f, ax, p = graphplot(g, edge_width = [3.0 for i in 1:ne(g)])\njulia> function action(state, idx, event, axis)\n           p.edge_width[][idx] = state ? 6.0 : 3.0\n           p.edge_width[] = p.edge_width[] #trigger observable\n       end\njulia> register_interaction!(ax, :edgehover, EdgeHoverHandler(action))\n\n\n\n\n\n","category":"function"},{"location":"#Drag-Interactions","page":"Home","title":"Drag Interactions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NodeDragHandler\nEdgeDragHandler","category":"page"},{"location":"#GraphMakie.NodeDragHandler","page":"Home","title":"GraphMakie.NodeDragHandler","text":"NodeDragHandler(fun)\n\nInitializes DragHandler for Nodes. Calls function\n\nfun(dragstate, idx, event, axis)\n\nwhere dragstate=true during the drag and false at the end of the drag, the last time fun is triggered. idx is the node index.\n\nExample\n\njulia> g = wheel_digraph(10)\njulia> f, ax, p = graphplot(g, node_size=20)\njulia> deregister_interaction!(ax, :rectanglezoom)\njulia> function action(state, idx, event, axis)\n           p[:node_pos][][idx] = event.data\n           p[:node_pos][] = p[:node_pos][]\n       end\njulia> register_interaction!(ax, :nodedrag, NodeDragHandler(action))\n\n\n\n\n\n","category":"function"},{"location":"#GraphMakie.EdgeDragHandler","page":"Home","title":"GraphMakie.EdgeDragHandler","text":"EdgeDragHandler(fun)\n\nInitializes DragHandler for Edges. Calls function\n\nfun(dragstate, idx, event, axis)\n\nwhere dragstate=true during the drag and false at the end of the drag, the last time fun is triggered. idx is the edge index.\n\nSee EdgeDrag for a concrete implementation. ```\n\n\n\n\n\n","category":"function"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"EditURL = \"https://github.com/kool7d/GraphMakie.jl/blob/master/docs/examples/plots.jl\"","category":"page"},{"location":"generated/plots/#Plotting-Graphs-with-GraphMakie.jl","page":"Feature Walkthrough","title":"Plotting Graphs with GraphMakie.jl","text":"","category":"section"},{"location":"generated/plots/#The-graphplot-Command","page":"Feature Walkthrough","title":"The graphplot Command","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"Plotting your first AbstractGraph from Graphs.jl is as simple as","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"using CairoMakie\nCairoMakie.activate!(type=\"png\") # hide\nset_theme!(resolution=(800, 400)) #hide\nCairoMakie.inline!(true) # hide\nusing GraphMakie\nusing Graphs\nimport Random; Random.seed!(2) # hide\n\nusing GraphMakie.NetworkLayout\n\ng = SimpleGraph(5)\nadd_edge!(g, 1, 2); add_edge!(g, 2, 4);\nadd_edge!(g, 4, 3); add_edge!(g, 3, 2);\nadd_edge!(g, 2, 5); add_edge!(g, 5, 4);\nadd_edge!(g, 4, 1); add_edge!(g, 1, 5);\n\noffsets = 0.15 * (p[:node_pos][] .- p[:node_pos][][1])\noffsets[1] = Point2f(0, 0.3)\np.nlabels_offset[] = offsets\nautolimits!(ax)\nf # hide","category":"page"},{"location":"generated/plots/#Adding-Edge-Labels","page":"Feature Walkthrough","title":"Adding Edge Labels","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"Random.seed!(42)\ng = barabasi_albert(6, 2)\n\nlabels =  repr.(1:ne(g))\n\nf, ax, p = graphplot(g, elabels=labels,\n                     elabels_color=[:black for i in 1:ne(g)],\n                     edge_color=[:black for i in 1:ne(g)])\nhidedecorations!(ax); hidespines!(ax); ax.aspect = DataAspect()\nf # hide","category":"page"},{"location":"generated/plots/#Indicate-Edge-Direction","page":"Feature Walkthrough","title":"Indicate Edge Direction","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"It is possible to put arrows on the edges using the arrow_show parameter. This parameter is true for SimpleDiGraph by default. The position and size of each arrowhead can be change using the arrow_shift and arrow_size parameters.","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"g = wheel_digraph(10)\narrow_size = [10+i for i in 1:ne(g)]\narrow_shift = range(0.1, 0.8, length=ne(g))\nf, ax, p = graphplot(g; arrow_size, arrow_shift)\nhidedecorations!(ax); hidespines!(ax); ax.aspect = DataAspect()\nf # hide\n\nset_theme!(resolution=(800, 800)) #hide\ng = SimpleGraph(8); add_edge!(g, 1, 2); add_edge!(g, 3, 4); add_edge!(g, 5, 6); add_edge!(g, 7, 8)\n\nwaypoints = Dict(1 => [(.25,  0.25), (.75, -0.25)],\n                 2 => [(.25, -0.25), (.75, -0.75)],\n                 3 => [(.25, -0.75), (.75, -1.25)],\n                 4 => [(.25, -1.25), (.75, -1.75)])\nwaypoint_radius = Dict(1 => nothing,\n                       2 => 0,\n                       3 => 0.05,\n                       4 => 0.15)\n\nf = Figure(); f[1,1] = ax = Axis(f)\nusing Makie.Colors # hide\nfor i in 3:4 #hide\n    poly!(ax, Circle(Point2f(waypoints[i][1]), waypoint_radius[i]), color=RGBA(0.0,0.44705883,0.69803923,0.2)) #hide\n    poly!(ax, Circle(Point2f(waypoints[i][2]), waypoint_radius[i]), color=RGBA(0.0,0.44705883,0.69803923,0.2)) #hide\nend #hide\n\np = graphplot!(ax, g; layout=SquareGrid(cols=2, dy=-0.5),\n               waypoints, waypoint_radius,\n               nlabels=[\"\",\"r = nothing (equals :spline)\",\n                        \"\",\"r = 0 (straight lines)\",\n                        \"\",\"r = 0.05 (in data space)\",\n                        \"\",\"r = 0.1\"],\n               nlabels_distance=30, nlabels_align=(:left,:center))\n\nfor i in 1:4 #hide\n    scatter!(ax, waypoints[i], color=RGBA(0.0,0.44705883,0.69803923,1.0)) #hide\nend #hide\nxlims!(ax, (-0.1, 2.25)), hidedecorations!(ax); hidespines!(ax); ax.aspect = DataAspect()\nf # hide","category":"page"},{"location":"generated/plots/#Plot-Graphs-in-3D","page":"Feature Walkthrough","title":"Plot Graphs in 3D","text":"","category":"section"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"If the layout returns points in 3 dimensions, the plot will be in 3D. However this is a bit experimental. Feel free to file an issue if there are any problems.","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"set_theme!(resolution=(800, 800)) #hide\ng = smallgraph(:cubical)\nelabels_shift = [0.5 for i in 1:ne(g)]\nelabels_shift[[2,7,8,9]] .= 0.3\nelabels_shift[10] = 0.25\ngraphplot(g; layout=Spring(dim=3, seed=5),\n          elabels=\"Edge \".*repr.(1:ne(g)),\n          elabels_textsize=12,\n          elabels_opposite=[3,5,7,8,12],\n          elabels_shift,\n          elabels_distance=3,\n          arrow_show=true,\n          arrow_shift=0.9,\n          arrow_size=15)","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"Using JSServe.jl and WGLMakie.jl we can also add some interactivity:","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"using JSServe\nPage(exportable=true, offline=true)","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"using WGLMakie\nWGLMakie.activate!()\nset_theme!(resolution=(800, 600))\ng = smallgraph(:dodecahedral)\ngraphplot(g, layout=Spring(dim=3), node_size=100)","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"","category":"page"},{"location":"generated/plots/","page":"Feature Walkthrough","title":"Feature Walkthrough","text":"This page was generated using Literate.jl.","category":"page"}]
}
